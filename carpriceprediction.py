# -*- coding: utf-8 -*-
"""CARPRICEPREDICTION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ur1dGkrslIxzvh16nbsB0fwG-y1ypr44
"""

# Import necessary libraries
import pandas as pd
import numpy as np
from datetime import datetime
from google.colab import drive
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Mount Google Drive
drive.mount('/content/drive')

# Load the dataset
df = pd.read_csv('/content/drive/MyDrive/CAR DETAILS FROM CAR DEKHO.csv')

# Display the first few rows of the DataFrame
print(df.head())

# Current Year
current_year = datetime.now().year

# Feature Engineering
# 1. Age of the Car
df['car_age'] = current_year - df['year']

# 2. Mileage Per Year
df['mileage_per_year'] = df['km_driven'] / df['car_age']

# 3. Brand Extraction
df['brand'] = df['name'].apply(lambda x: x.split()[0])

# 4. Transmission Type (Binary Encoding)
df['is_manual'] = df['transmission'].apply(lambda x: 1 if x == 'Manual' else 0)

# 5. Fuel Type (One-Hot Encoding)
df = pd.get_dummies(df, columns=['fuel'], prefix='fuel', drop_first=True)

# 6. Ownership Type (Binary Encoding)
df['is_first_owner'] = df['owner'].apply(lambda x: 1 if 'First' in x else 0)

# 7. Price-to-Year Ratio
df['price_to_year_ratio'] = df['selling_price'] / df['car_age']

# Display the DataFrame with the new features
print(df.head())

# Splitting the data into features and target variable
X = df.drop(columns=['selling_price', 'name', 'seller_type', 'owner'])  # Drop target and non-numeric columns
y = df['selling_price']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# One-Hot Encoding for training and testing data
X_train = pd.get_dummies(X_train)
X_test = pd.get_dummies(X_test)

# Align the columns of train and test sets to ensure they have the same structure
X_train, X_test = X_train.align(X_test, join='left', axis=1, fill_value=0)

# Handling any remaining missing values (if any)
X_train.fillna(X_train.mean(), inplace=True)
X_test.fillna(X_test.mean(), inplace=True)

# Dictionary of models to train
models = {
    'Linear Regression': LinearRegression(),
    'Ridge Regression': Ridge(),
    'Lasso Regression': Lasso(),
    'Decision Tree': DecisionTreeRegressor(),
    'Random Forest': RandomForestRegressor(),
    'Gradient Boosting': GradientBoostingRegressor()
}

# Dictionary to store the results
results = {}

# Train each model and evaluate performance
for model_name, model in models.items():
    model.fit(X_train, y_train)  # Train the model
    y_pred = model.predict(X_test)  # Predict on the test set

    # Calculate performance metrics
    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    # Store the results
    results[model_name] = {
        'MAE': mae,
        'MSE': mse,
        'RÂ²': r2
    }

# Display the results
print(pd.DataFrame(results).T)

# Input for a new prediction
year = int(input("Enter the car's year of manufacture: "))
km_driven = int(input("Enter the car's kilometers driven: "))
fuel = input("Enter the fuel type (Petrol/Diesel/CNG/etc.): ")
transmission = input("Enter the transmission type (Manual/Automatic): ")

# Create a DataFrame for the new input
new_data = {
    'year': [year],
    'km_driven': [km_driven],
    'fuel': [fuel],
    'transmission': [transmission]
}

# Convert the dictionary to a DataFrame
new_data_df = pd.DataFrame(new_data)

# Feature Engineering for the new data
new_data_df['car_age'] = current_year - new_data_df['year']
new_data_df['mileage_per_year'] = new_data_df['km_driven'] / new_data_df['car_age']
new_data_df['is_manual'] = new_data_df['transmission'].apply(lambda x: 1 if x == 'Manual' else 0)

# One-Hot Encoding for 'fuel'
new_data_df = pd.get_dummies(new_data_df)

# Align the new data with training data structure
new_data_df = new_data_df.reindex(columns=X_train.columns, fill_value=0)

# Use the Random Forest model to predict the selling price
predicted_price = models['Random Forest'].predict(new_data_df)

# Output the predicted price
print(f"The predicted selling price of the car is: {predicted_price[0]}")